
const fs = require("fs");
const Converter = require('pdftohtmljs');
const uuid = require('uuid-random');
const inlineCSS = require('inlinecss');
const moment = require('moment');
const jsdom = require("jsdom");
const { JSDOM } = jsdom;

if(process.argv.length < 3) {
    console.log("please provide a valid pdf path");
    process.exit(1);
}

let input = process.argv[2];

let path = 'output';
let outputFile = moment().format('YMMDD-HHmmss') + "-raw.html";
let inlineFile = moment().format('YMMDD-HHmmss') + "-inlinecss.html";

let pdf = Converter(input, outputFile, {
    bin: './php2htmlEX.sh',
});

pdf.add_options([
    "--dest-dir " + path,
    "--fit-width 968",
    "-f 187",
    "-l 188",
    "--optimize-text 5",
    "--printing 0",
    "--embed-css 0",
    "--embed-font 0",
    "--embed-javascript 0",
]);

pdf.convert().then(function() {
    console.log("Generated raw html output");

    return new Promise(function(resolve, reject) {
        let html = fs.readFileSync(path + "/" + outputFile).toString();

        // remove styles generated by pdf2htmlEX
        html = html
            .replace('<link rel="stylesheet" href="base.min.css"/>', '')
            .replace('<link rel="stylesheet" href="fancy.min.css"/>', '')
            .replace('<div id="sidebar">\n<div id="outline">\n</div>\n</div>\n', '')
            .replace('<div class="pi" data-data=\'{"ctm":[1.330000,0.000000,0.000000,1.330000,0.000000,0.000000]}\'></div>', '');

        fs.writeFileSync(path + "/" + outputFile, html);

        resolve();
    });
}).then(function() {
    console.log("Cleaned up html output");

    // convert css classes etc to inline css
    return new Promise(function(resolve, reject) {
        inlineCSS.inlineFile(path + "/" + outputFile, path + "/" + inlineFile, resolve);
    });
}).then(function() {
    console.log("Parsed raw html an generated inline css");

    let document = new JSDOM(fs.readFileSync(path + "/" + inlineFile).toString()).window.document;

    let pages = document.querySelectorAll('body > div > div > div');

    let familyMap = {
        'ff1': 'italic',
        'ff2': 'normal',
        'ff3': 'bold',
    };

    let leftMap = {
        94: 'line-number',
        101: 'line-number',
        132: 'line',
        155: 'new-paragraph',
    };

    pages.forEach(function(page) {
        page.childNodes.forEach(function(line, index) {
            if(index === 0) {
                console.log('')
                console.log('=========== new page ===========');
            }

            if(index < 2) {
                console.log('page header or number');
            }

            let left = Math.round(parseFloat(line.style.left));

            console.log(line.textContent, left, leftMap[left]);
        });
    });
}).catch(function(err) {
    console.log(err);
});
